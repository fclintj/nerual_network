!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
__init__	deepnn.py	/^    def __init__(self, num_neurons, num_inputs, activation):$/;"	m	class:layer
__init__	deepnn.py	/^    def __init__(self, num_outputs, layers, output_layer, momentum):$/;"	m	class:neural_network
__init__	deepnn.py	/^    def __init__(self,function,derivative):$/;"	m	class:activation_function
__init__	deepnn.py	/^    def __init__(self,num_inputs,sigma):$/;"	m	class:neuron
__layer_opperations	deepnn.py	/^    def __layer_opperations(self,X,layers):$/;"	m	class:neural_network	file:
__set_layer_sigma	deepnn.py	/^    def __set_layer_sigma(self):$/;"	m	class:neural_network	file:
activation_function	deepnn.py	/^class activation_function:$/;"	c
backward_prop	deepnn.py	/^    def backward_prop(self,x,yhat,y):$/;"	m	class:neural_network
derivative	deepnn.py	/^    def derivative(self,x):$/;"	m	class:activation_function
find_neuron_derivative	deepnn.py	/^    def find_neuron_derivative(self):$/;"	m	class:layer
forward_prop	deepnn.py	/^    def forward_prop(self, data):$/;"	m	class:neural_network
function	deepnn.py	/^    def function(self,x):$/;"	m	class:activation_function
get_ordered	deepnn.py	/^def get_ordered(X_train):$/;"	f
hidden_layers	deepnn.py	/^hidden_layers = [layer0, layer1]$/;"	v
layer	deepnn.py	/^class layer:$/;"	c
layer0	deepnn.py	/^layer0 = layer(2,num_inputs,sigmoid)$/;"	v
layer1	deepnn.py	/^layer1 = layer(2,layer0.num_neurons,sigmoid)$/;"	v
momentum	deepnn.py	/^momentum = None$/;"	v
network	deepnn.py	/^network = neural_network(num_outputs,hidden_layers,softmax,momentum)$/;"	v
neural_network	deepnn.py	/^class neural_network:$/;"	c
neuron	deepnn.py	/^class neuron:$/;"	c
num_inputs	deepnn.py	/^num_inputs = 2 $/;"	v
num_outputs	deepnn.py	/^num_outputs = 2$/;"	v
print_images	deepnn.py	/^def print_images(ordered,m,n):$/;"	f
repot_error	deepnn.py	/^    def repot_error(self, yhat, y):$/;"	m	class:neural_network
sigmoid	deepnn.py	/^sigmoid = activation_function(sigmoid_func,sigmoid_derivative)$/;"	v
sigmoid_derivative	deepnn.py	/^def sigmoid_derivative(x):$/;"	f
sigmoid_func	deepnn.py	/^def sigmoid_func(x):$/;"	f
softmax	deepnn.py	/^softmax = activation_function(softmax_func,softmax_func)$/;"	v
softmax_derivative	deepnn.py	/^def softmax_derivative(x):$/;"	f
softmax_func	deepnn.py	/^def softmax_func(x):$/;"	f
train_network	deepnn.py	/^    def train_network(self, x, y):$/;"	m	class:neural_network
x	deepnn.py	/^x = [0.05, 0.1]$/;"	v
y	deepnn.py	/^y = [0.01, 0.99]$/;"	v
