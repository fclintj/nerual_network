!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
NeuralNetwork	deepnn.py	/^class NeuralNetwork:$/;"	c
NeuralNetwork	deepnn2.py	/^class NeuralNetwork:$/;"	c
NeuralNetwork	deepnn_two_class.py	/^class NeuralNetwork:$/;"	c
NeuralNetwork	test_output.py	/^class NeuralNetwork:$/;"	c
__init__	deepnn.py	/^    def __init__(self, data0, data1):$/;"	m	class:data_frame
__init__	deepnn.py	/^    def __init__(self, layers, softmax=True, momentum=0, eta=0.1, MSE_freq=50):$/;"	m	class:NeuralNetwork
__init__	deepnn.py	/^    def __init__(self,function,derivative):$/;"	m	class:activation_function
__init__	deepnn.py	/^    def __init__(self,num_inputs,num_neurons, activation):$/;"	m	class:layer
__init__	deepnn2.py	/^    def __init__(self, data0, data1):$/;"	m	class:data_frame
__init__	deepnn2.py	/^    def __init__(self, layers, softmax=True, momentum=0, eta=0.1, MSE_freq=50):$/;"	m	class:NeuralNetwork
__init__	deepnn2.py	/^    def __init__(self,function,derivative):$/;"	m	class:activation_function
__init__	deepnn2.py	/^    def __init__(self,num_inputs,num_neurons, activation):$/;"	m	class:layer
__init__	deepnn_two_class.py	/^    def __init__(self, data0, data1):$/;"	m	class:data_frame
__init__	deepnn_two_class.py	/^    def __init__(self, layers, softmax=True, momentum=0, eta=0.1, MSE_freq=50):$/;"	m	class:NeuralNetwork
__init__	deepnn_two_class.py	/^    def __init__(self,function,derivative):$/;"	m	class:activation_function
__init__	deepnn_two_class.py	/^    def __init__(self,num_inputs,num_neurons, activation):$/;"	m	class:layer
__init__	test_output.py	/^    def __init__(self, data0, data1):$/;"	m	class:data_frame
__init__	test_output.py	/^    def __init__(self, layers, softmax=True, momentum=0, eta=0.1, MSE_freq=50):$/;"	m	class:NeuralNetwork
__init__	test_output.py	/^    def __init__(self,function,derivative):$/;"	m	class:activation_function
__init__	test_output.py	/^    def __init__(self,num_inputs,num_neurons, activation):$/;"	m	class:layer
__set_GRV_starting_weights	deepnn.py	/^    def __set_GRV_starting_weights(self):$/;"	m	class:NeuralNetwork	file:
__set_GRV_starting_weights	deepnn2.py	/^    def __set_GRV_starting_weights(self):$/;"	m	class:NeuralNetwork	file:
__set_GRV_starting_weights	deepnn_two_class.py	/^    def __set_GRV_starting_weights(self):$/;"	m	class:NeuralNetwork	file:
__set_GRV_starting_weights	test_output.py	/^    def __set_GRV_starting_weights(self):$/;"	m	class:NeuralNetwork	file:
activation_function	deepnn.py	/^class activation_function:$/;"	c
activation_function	deepnn2.py	/^class activation_function:$/;"	c
activation_function	deepnn_two_class.py	/^class activation_function:$/;"	c
activation_function	test_output.py	/^class activation_function:$/;"	c
classify_data	deepnn.py	/^    def classify_data(self, X):$/;"	m	class:NeuralNetwork
classify_data	deepnn2.py	/^    def classify_data(self, X):$/;"	m	class:NeuralNetwork
classify_data	deepnn_two_class.py	/^    def classify_data(self, X):$/;"	m	class:NeuralNetwork
classify_data	test_output.py	/^    def classify_data(self, X):$/;"	m	class:NeuralNetwork
data_frame	deepnn.py	/^class data_frame:$/;"	c
data_frame	deepnn2.py	/^class data_frame:$/;"	c
data_frame	deepnn_two_class.py	/^class data_frame:$/;"	c
data_frame	test_output.py	/^class data_frame:$/;"	c
der	deepnn.py	/^    def der(self, X):$/;"	m	class:layer
der	deepnn2.py	/^    def der(self, X):$/;"	m	class:layer
der	deepnn_two_class.py	/^    def der(self, X):$/;"	m	class:layer
der	test_output.py	/^    def der(self, X):$/;"	m	class:layer
derivative	deepnn.py	/^    def derivative(self,x):$/;"	m	class:activation_function
derivative	deepnn2.py	/^    def derivative(self,x):$/;"	m	class:activation_function
derivative	deepnn_two_class.py	/^    def derivative(self,x):$/;"	m	class:activation_function
derivative	test_output.py	/^    def derivative(self,x):$/;"	m	class:activation_function
forward	deepnn.py	/^    def forward(self, X):$/;"	m	class:layer
forward	deepnn2.py	/^    def forward(self, X):$/;"	m	class:layer
forward	deepnn_two_class.py	/^    def forward(self, X):$/;"	m	class:layer
forward	test_output.py	/^    def forward(self, X):$/;"	m	class:layer
forward_prop	deepnn.py	/^    def forward_prop(self, X):$/;"	m	class:NeuralNetwork
forward_prop	deepnn2.py	/^    def forward_prop(self, X):$/;"	m	class:NeuralNetwork
forward_prop	deepnn_two_class.py	/^    def forward_prop(self, X):$/;"	m	class:NeuralNetwork
forward_prop	test_output.py	/^    def forward_prop(self, X):$/;"	m	class:NeuralNetwork
function	deepnn.py	/^    def function(self,x):$/;"	m	class:activation_function
function	deepnn2.py	/^    def function(self,x):$/;"	m	class:activation_function
function	deepnn_two_class.py	/^    def function(self,x):$/;"	m	class:activation_function
function	test_output.py	/^    def function(self,x):$/;"	m	class:activation_function
gendata2	deepnn.py	/^def gendata2(class_type,N):$/;"	f
gendata2	deepnn2.py	/^def gendata2(class_type,N):$/;"	f
gendata2	deepnn_two_class.py	/^def gendata2(class_type,N):$/;"	f
gendata2	test_output.py	/^def gendata2(class_type,N):$/;"	f
get_2_class_data	deepnn.py	/^def get_2_class_data():$/;"	f
get_2_class_data	deepnn2.py	/^def get_2_class_data():$/;"	f
get_2_class_data	deepnn_two_class.py	/^def get_2_class_data():$/;"	f
get_2_class_data	test_output.py	/^def get_2_class_data():$/;"	f
get_3_class_data	deepnn.py	/^def get_3_class_data():$/;"	f
get_3_class_data	deepnn2.py	/^def get_3_class_data():$/;"	f
get_3_class_data	deepnn_two_class.py	/^def get_3_class_data():$/;"	f
get_3_class_data	test_output.py	/^def get_3_class_data():$/;"	f
get_classasgn_80_20	deepnn.py	/^def get_classasgn_80_20():$/;"	f
get_classasgn_80_20	deepnn2.py	/^def get_classasgn_80_20():$/;"	f
get_classasgn_80_20	deepnn_two_class.py	/^def get_classasgn_80_20():$/;"	f
get_classasgn_80_20	test_output.py	/^def get_classasgn_80_20():$/;"	f
get_mnist_train	deepnn.py	/^def get_mnist_train(file_path):$/;"	f
get_mnist_train	deepnn2.py	/^def get_mnist_train(file_path):$/;"	f
get_mnist_train	deepnn_two_class.py	/^def get_mnist_train(file_path):$/;"	f
get_mnist_train	test_output.py	/^def get_mnist_train(file_path):$/;"	f
get_moon_class_data	deepnn.py	/^def get_moon_class_data():$/;"	f
get_moon_class_data	deepnn2.py	/^def get_moon_class_data():$/;"	f
get_moon_class_data	deepnn_two_class.py	/^def get_moon_class_data():$/;"	f
get_moon_class_data	test_output.py	/^def get_moon_class_data():$/;"	f
get_moon_gendata	deepnn.py	/^def get_moon_gendata():$/;"	f
get_moon_gendata	deepnn2.py	/^def get_moon_gendata():$/;"	f
get_moon_gendata	deepnn_two_class.py	/^def get_moon_gendata():$/;"	f
get_moon_gendata	test_output.py	/^def get_moon_gendata():$/;"	f
get_ordered_digits	deepnn.py	/^def get_ordered_digits(X_train):$/;"	f
get_ordered_digits	deepnn2.py	/^def get_ordered_digits(X_train):$/;"	f
get_ordered_digits	deepnn_two_class.py	/^def get_ordered_digits(X_train):$/;"	f
get_ordered_digits	test_output.py	/^def get_ordered_digits(X_train):$/;"	f
get_sprial_class_data	deepnn.py	/^def get_sprial_class_data():$/;"	f
get_sprial_class_data	deepnn2.py	/^def get_sprial_class_data():$/;"	f
get_sprial_class_data	deepnn_two_class.py	/^def get_sprial_class_data():$/;"	f
get_sprial_class_data	test_output.py	/^def get_sprial_class_data():$/;"	f
layer	deepnn.py	/^class layer:$/;"	c
layer	deepnn2.py	/^class layer:$/;"	c
layer	deepnn_two_class.py	/^class layer:$/;"	c
layer	test_output.py	/^class layer:$/;"	c
main	deepnn.py	/^def main():$/;"	f
main	deepnn2.py	/^def main():$/;"	f
main	deepnn_two_class.py	/^def main():$/;"	f
main	test_output.py	/^def main():$/;"	f
plot_boundaries	deepnn.py	/^def plot_boundaries(xlim, ylim, equation):$/;"	f
plot_boundaries	deepnn2.py	/^def plot_boundaries(xlim, ylim, equation):$/;"	f
plot_boundaries	deepnn_two_class.py	/^def plot_boundaries(xlim, ylim, equation):$/;"	f
plot_boundaries	test_output.py	/^def plot_boundaries(xlim, ylim, equation):$/;"	f
plot_data	deepnn.py	/^def plot_data(x0,x1):$/;"	f
plot_data	deepnn2.py	/^def plot_data(x0,x1):$/;"	f
plot_data	deepnn_two_class.py	/^def plot_data(x0,x1):$/;"	f
plot_data	test_output.py	/^def plot_data(x0,x1):$/;"	f
plot_error	deepnn.py	/^    def plot_error(self,index,momentum,eta):$/;"	m	class:NeuralNetwork
plot_error	deepnn2.py	/^    def plot_error(self,index,momentum,eta,training_accuracy):$/;"	m	class:NeuralNetwork
plot_error	deepnn_two_class.py	/^    def plot_error(self,index,momentum,eta):$/;"	m	class:NeuralNetwork
plot_error	test_output.py	/^    def plot_error(self,index,momentum,eta):$/;"	m	class:NeuralNetwork
print_digits	deepnn.py	/^def print_digits(X,ordered,m,n):$/;"	f
print_digits	deepnn2.py	/^def print_digits(X,ordered,m,n):$/;"	f
print_digits	deepnn_two_class.py	/^def print_digits(X,ordered,m,n):$/;"	f
print_digits	test_output.py	/^def print_digits(X,ordered,m,n):$/;"	f
relu_der	deepnn.py	/^def relu_der(X):$/;"	f
relu_der	deepnn2.py	/^def relu_der(X):$/;"	f
relu_der	deepnn_two_class.py	/^def relu_der(X):$/;"	f
relu_der	test_output.py	/^def relu_der(X):$/;"	f
relu_func	deepnn.py	/^def relu_func(X):$/;"	f
relu_func	deepnn2.py	/^def relu_func(X):$/;"	f
relu_func	deepnn_two_class.py	/^def relu_func(X):$/;"	f
relu_func	test_output.py	/^def relu_func(X):$/;"	f
return_value	deepnn.py	/^def return_value(X):$/;"	f
return_value	deepnn2.py	/^def return_value(X):$/;"	f
return_value	deepnn_two_class.py	/^def return_value(X):$/;"	f
return_value	test_output.py	/^def return_value(X):$/;"	f
set_initial_conditions	deepnn.py	/^    def set_initial_conditions(self):$/;"	m	class:NeuralNetwork
set_initial_conditions	deepnn.py	/^    def set_initial_conditions(self):$/;"	m	class:layer
set_initial_conditions	deepnn2.py	/^    def set_initial_conditions(self):$/;"	m	class:NeuralNetwork
set_initial_conditions	deepnn2.py	/^    def set_initial_conditions(self):$/;"	m	class:layer
set_initial_conditions	deepnn_two_class.py	/^    def set_initial_conditions(self):$/;"	m	class:NeuralNetwork
set_initial_conditions	deepnn_two_class.py	/^    def set_initial_conditions(self):$/;"	m	class:layer
set_initial_conditions	test_output.py	/^    def set_initial_conditions(self):$/;"	m	class:NeuralNetwork
set_initial_conditions	test_output.py	/^    def set_initial_conditions(self):$/;"	m	class:layer
sigmoid_der	deepnn.py	/^def sigmoid_der(x):$/;"	f
sigmoid_der	deepnn2.py	/^def sigmoid_der(x):$/;"	f
sigmoid_der	deepnn_two_class.py	/^def sigmoid_der(x):$/;"	f
sigmoid_der	test_output.py	/^def sigmoid_der(x):$/;"	f
sigmoid_func	deepnn.py	/^def sigmoid_func(x):$/;"	f
sigmoid_func	deepnn2.py	/^def sigmoid_func(x):$/;"	f
sigmoid_func	deepnn_two_class.py	/^def sigmoid_func(x):$/;"	f
sigmoid_func	test_output.py	/^def sigmoid_func(x):$/;"	f
softmax_func	deepnn.py	/^def softmax_func(x):$/;"	f
softmax_func	deepnn2.py	/^def softmax_func(x):$/;"	f
softmax_func	deepnn_two_class.py	/^def softmax_func(x):$/;"	f
softmax_func	test_output.py	/^def softmax_func(x):$/;"	f
stable_softmax	deepnn.py	/^    def stable_softmax(self, X):$/;"	m	class:NeuralNetwork
stable_softmax	deepnn2.py	/^    def stable_softmax(self, X):$/;"	m	class:NeuralNetwork
stable_softmax	deepnn_two_class.py	/^    def stable_softmax(self, X):$/;"	m	class:NeuralNetwork
stable_softmax	test_output.py	/^    def stable_softmax(self, X):$/;"	m	class:NeuralNetwork
stable_softmax_func	deepnn_two_class.py	/^def stable_softmax_func(x):$/;"	f
train_data	deepnn.py	/^    def train_data(self, X, Y):$/;"	m	class:NeuralNetwork
train_data	deepnn2.py	/^    def train_data(self, X, Y):$/;"	m	class:NeuralNetwork
train_data	deepnn_two_class.py	/^    def train_data(self, X, Y):$/;"	m	class:NeuralNetwork
train_data	test_output.py	/^    def train_data(self, X, Y):$/;"	m	class:NeuralNetwork
train_network	deepnn.py	/^    def train_network(self, X, Y, batch_size, epochs):$/;"	m	class:NeuralNetwork
train_network	deepnn2.py	/^    def train_network(self, X, Y, batch_size=100, $/;"	m	class:NeuralNetwork
train_network	deepnn_two_class.py	/^    def train_network(self, X, Y, batch_size, epochs):$/;"	m	class:NeuralNetwork
train_network	test_output.py	/^    def train_network(self, X, Y, batch_size=200, epochs=100):$/;"	m	class:NeuralNetwork
validate_results	deepnn.py	/^    def validate_results(self, Yhat, Y):$/;"	m	class:NeuralNetwork
validate_results	deepnn2.py	/^    def validate_results(self, Yhat, Y):$/;"	m	class:NeuralNetwork
validate_results	deepnn_two_class.py	/^    def validate_results(self, Yhat, Y):$/;"	m	class:NeuralNetwork
validate_results	test_output.py	/^    def validate_results(self, Yhat, Y):$/;"	m	class:NeuralNetwork
write_network_values	deepnn.py	/^    def write_network_values(self, filename):$/;"	m	class:NeuralNetwork
write_network_values	deepnn2.py	/^    def write_network_values(self, filename):$/;"	m	class:NeuralNetwork
write_network_values	deepnn_two_class.py	/^    def write_network_values(self, filename):$/;"	m	class:NeuralNetwork
write_network_values	test_output.py	/^    def write_network_values(self, filename):$/;"	m	class:NeuralNetwork
